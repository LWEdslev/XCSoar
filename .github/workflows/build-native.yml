# for dev-branch only
---
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - 'cloud/**'
      - 'doc/**'
      - 'fuzzer/**'
      - 'kobo/**'
      - 'python/**'
      - '.github/workflows/build-container.yml'
      - '.github/workflows/build-unix.yml'
      - '.github/workflows/build-translation.yml'
      - '.readthedocs.yaml'
    branches:
      - other-master
    tags:
      - 'v*'

  pull_request:
    paths-ignore:
      - 'cloud/**'
      - 'doc/**'
      - 'fuzzer/**'
      - 'kobo/**'
      - 'python/**'
      - '.github/workflows/build-container.yml'
      - '.github/workflows/build-unix.yml'
      - '.github/workflows/build-translation.yml'
      - '.readthedocs.yaml'
    branches:
     # - master
       - dev-branch

env:
  DEBUG: n
  BOOST: boost_1_87_0
  BUILD_TARGETS: UNIX,WIN64,PC
  TEST_TARGETS: UNIX,KOBO

jobs:
  release:
    name: "Create Release"
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Parse changelog
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          TAG=$(echo "${{ github.ref }}" | cut -f3 -d '/')
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo 'CHANGELOGENTRY<<EOF' >> $GITHUB_ENV
          ./tools/changelog.sh "$TAG" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          case "$TAG" in
            *-rc*)
              echo "PRERELEASE=true" >> $GITHUB_ENV
              ;;
            *)
              echo "PRERELEASE=false" >> $GITHUB_ENV
              ;;
          esac
        id: changelogentry

      - name: Create release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1.1.4
        # uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          allowUpdates: true
          name: Version ${{ github.ref_name }}
          body: ${{ env.CHANGELOGENTRY }}
          prerelease: ${{ env.PRERELEASE }}

      - name: Get OpenSoar Version
        id: get_version
        run: |
          echo "Get OpenSoar Version"
          echo "CurrDir = $(pwd)"

  build: # step 2
    # if: ${{ startsWith('UNIX,MACOS,WIN64', 'UNIX') }}
    runs-on: ${{ matrix.os }}
    needs: release
    container: ${{ matrix.target_container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: ANDROIDAARCH64
            target_bin: OpenSoar
            target_final: OpenSoar
            target_ext: .apk
            target_test: false
            target_upload: true
            ndk: r28
            target_container: debian:bookworm-slim
          
          - os: ubuntu-24.04
            target: ANDROID
            target_bin: OpenSoar
            target_final: OpenSoar
            target_ext: .apk
            target_test: false
            target_upload: false
            ndk: r28
            target_container: debian:bookworm-slim
          #### needs very long time.. 
          - os: ubuntu-24.04
          # - os: ubuntu-22.04
            target: UNIX
            target_bin: OpenSoar_${{ needs.release.outputs.version }}_amd64
            target_final: OpenSoar_
            target_ext: .deb
            target_test: false
            # temporary false: target_upload: true
            target_upload: false
            target_container: debian:bookworm-slim    # => Ubuntu 24.04
            #  target_container: debian:bullseye-slim # => Ubuntu 22.04

          - os: ubuntu-22.04
            target: WIN64
            target_bin: OpenSoar
            target_final: OpenSoar
            target_ext: .exe
            target_test: false
            target_upload: false
            target_container: debian:bookworm-slim
          
          - os: ubuntu-24.04
            target: WIN64
            target_bin: OpenSoar
            target_final: OpenSoar
            target_ext: .exe
            target_test: false
            # temporary false: target_upload: true
            target_upload: false
            target_container: debian:bookworm-slim
          
          - os: ubuntu-24.04
            target: PC
            target_bin: OpenSoar
            target_final: OpenSoar
            target_ext: .exe
            target_test: false
            # temporary false: target_upload: true
            target_upload: false
            target_container: debian:bookworm-slim
          
          - os: macos-13
            target: OSX64
            target_bin: OpenSoar
            target_final: OpenSoar
            target_ext: ''
            target_test: false
            # temporary false: target_upload: true
            target_upload: false
            # w/o container

          - os: macos-14
            target: MACOS
            target_bin: OpenSoar
            target_final: OpenSoar
            target_ext: ''
            target_test: false
            # temporary false: target_upload: true
            target_upload: false
            # w/o container
          
          - os: macos-14
            target: IOS64
            target_bin: OpenSoar
            target_final: OpenSoar
            target_ext: ''
            target_test: false
            # temporary false: target_upload: true
            target_upload: false
            # w/o container
        # exclude:
          #### needs long time.. 
          - os: ubuntu-24.04
            target: KOBO
            target_bin: OpenSoar
            target_final: KoboRoot
            target_ext: .tgz
            target_test: false
            # temporary false: target_upload: true
            # how is uploaded target working at KOBO?
            target_upload: false
            target_container: debian:bookworm-slim
  
    steps:
      - name: Check Git Variables
        # if: contains(env.BUILD_TARGETS, ${{ matrix.target }})
        run: |
          echo "(No) Check Git variables"
          COMMIT=$(echo $GITHUB_SHA | head -c 7)
          echo "GIT_COMMIT=$COMMIT" >> $GITHUB_ENV
        
      - name: Install checkout dependencies
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        run: |
          echo "Install checkout dependencies: ${{ matrix.target }} "
          apt-get update
          apt-get install -y --no-install-recommends git \
            ca-certificates rsync openssh-client
  
      - name: Set environment variables
        run: |
            case ${{ matrix.target }} in
                ANDROID | ANDROIDFAT | ANDROIDAARCH64)
                  echo "BINARY_DIR=output/ANDROID/bin" >> $GITHUB_ENV
                  ;;
                KOBO)
                  echo "BINARY_DIR=output/${{ matrix.target }}/KoboRoot" >> $GITHUB_ENV
                  ;;
                *)
                  echo "BINARY_DIR=output/${{ matrix.target }}/bin" >> $GITHUB_ENV
                  ;;
            esac
            
            echo "DEBUG=$DEBUG"
            case ${{ matrix.target }} in
                OSX64 | MACOS)
                  echo "BUILD_PARAMS=-j$(nproc) TARGET=${{ matrix.target }} DEBUG=$DEBUG} USE_CCACHE=y V=2 OPTIMIZE=-O0" >> $GITHUB_ENV
                  echo "BUILDER=gmake" >> $GITHUB_ENV
                  ;;
                IOS64)
                  echo "BUILD_PARAMS=-j1 TARGET=${{ matrix.target }} DEBUG=$DEBUG} USE_CCACHE=y V=2 OPTIMIZE=-O0" >> $GITHUB_ENV
                  echo "BUILDER=gmake" >> $GITHUB_ENV
                  ;;
                *)
                  echo "BUILD_PARAMS=-j$(nproc) TARGET=${{ matrix.target }} DEBUG=$DEBUG USE_CCACHE=y V=2" >> $GITHUB_ENV
                  echo "BUILDER=make" >> $GITHUB_ENV
                  ;;
            esac
            
            if ${{ matrix.target_test }} ; then echo "IS_TEST=everything" >> $GITHUB_ENV; fi

      - name: Set vars for release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "Set vars for release: ${{ matrix.target }} "
          if [ ${{ secrets.TEST }} = '123456' ]; then
            echo "secrets detected"
          else 
            echo "secrets NOT detected"
          fi
          
          if [ ${{ startsWith(github.ref, 'refs/tags/v') }} = true ]; then
            echo "DEBUG=n" >> $GITHUB_ENV
            if [ ${{ matrix.target_final }} = "OpenSoar" ]; then
              echo "TARGET_FINAL=${{ matrix.target_final }}" >> $GITHUB_ENV
            fi
          elif [ ${{ matrix.target }} = 'WIN64' ]; then
            # August2111: with WIN64 don't use the Debug option
            echo "no DEBUG flag"
            echo "DEBUG=n" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
  
      - name: Cache ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.target }}-ccache
  
      - name: "Cache Boost"
        uses: actions/cache@v4
        with:
          key: ${{ env.BOOST }}-${{ hashFiles('lib/boost/patches/**') }}
          path: |
            ${{ github.workspace }}/output/download/${{ env.BOOST }}.tar.bz2
            ${{ github.workspace }}/output/src/stamp-${{ env.BOOST }}
            ${{ github.workspace }}/output/src/${{ env.BOOST }}/boost
  
      - name: Install dependencies
        run: |
          echo "Install dependencies: ${{ matrix.target }}"
          echo "CurrDir = $(pwd)"
          git config --global --add safe.directory $GITHUB_WORKSPACE
          echo "GITHUB_WORKING: ${{ matrix.target }}"
          echo "github.workspace = ${{ github.workspace }}"
          echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          echo "GITHUB_SHA       = $GITHUB_SHA"
          echo "GITHUB_HASH      = $GITHUB_HASH"
          echo "GIT_COMMIT       = $GIT_COMMIT"
  
          if [ ${{ startsWith(matrix.os, 'ubuntu-') }} = true ]; then
            ./ide/provisioning/install-debian-packages.sh UPDATE BASE LINUX
            case ${{ matrix.target }} in
              ANDROID | ANDROIDFAT | ANDROIDAARCH64)
                ./ide/provisioning/install-debian-packages.sh ARM LLVM ANDROID
                ./ide/provisioning/install-android-tools.sh NDK SDK
                ;;
              WIN64 | WIN32 | PC)
                # echo "git_hash=$(shell git rev-parse --short --verify HEAD )" >> $GITHUB_ENV
                ./ide/provisioning/install-debian-packages.sh WIN
                ;;
              UNIX)
                ./ide/provisioning/install-debian-packages.sh LIBINPUT_GBM DEBIAN
                ;;
              KOBO)
                ./ide/provisioning/install-debian-packages.sh ARM KOBO
                ;;
            esac
            ## unknown section!!!: ./ide/provisioning/install-debian-packages.sh CLEAN
          elif [ ${{ startsWith(matrix.os, 'macos-') }} = true ] ; then
            ./ide/provisioning/install-darwin-packages.sh BASE
            ./ide/provisioning/install-darwin-packages.sh ${{ matrix.target }}            
          fi
  
      - name: Prepare signing key
        shell: bash
        if: ${{ startsWith(matrix.target, 'ANDROID') && startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "Prepare signing key: ${{ matrix.target }}"
          # please use secrets.XCSOAR_UPLOAD_KEY... for secrets.OPENSOAR_UPLOAD_KEY to be
          # compatible with repo XCSoar/XCSoar
          if [ -n "${{ secrets.XCSOAR_UPLOAD_KEY_JKS_BASE64 }}" ]; then
            mkdir -p ~/.android/
            echo "${{ secrets.XCSOAR_UPLOAD_KEY_JKS_BASE64 }}" | base64 -d > ~/.android/signing-key.jks
            md5sum ~/.android/signing-key.jks
          fi
  
      - name: Compile OpenSoar - PR
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "Compile OpenSoar - PR: ${{ matrix.target }}"
          ${{ env.BUILDER }} ${{ env.BUILD_PARAMS }} ${{ env.IS_TEST }} 
          case ${{ matrix.target }} in
              ANDROID | ANDROIDFAT | ANDROIDAARCH64)
                mv output/ANDROID/bin/${{ matrix.target_bin }}-debug${{ matrix.target_ext }} ${{ matrix.target_bin }}${{ matrix.target_ext }}
                ;;
              KOBO | UNIX)
                 # do noting with deb files or Kobo files...
                ;;
              *)
                mv output/${{ matrix.target }}/bin/${{ matrix.target_bin }}${{ matrix.target_ext }} ${{ matrix.target_bin }}${{ matrix.target_ext }}
                ;;
          esac

      - name: Test Directory (UNIX)
        if: ${{ startsWith(matrix.target, 'UNIX') }}
        run: |
          echo "----------------------------------------------------------------"
          if [ -d ${{ env.BINARY_DIR }} ]; then
            echo "ls -l output/DEBIAN-${{ matrix.target }}/bin"
            echo "=============================================================="
            ls -l ${{ env.BINARY_DIR }}
          else
            echo "dir '${{ env.BINARY_DIR }}' doesn't exist"
          fi
          echo "----------------------------------------------------------------"
      - name: Upload Test artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.target_test }}
        with:
          name: Test-${{ env.GIT_COMMIT }}-${{ matrix.target }}
          path: |
            test/README
            ${{ env.BINARY_DIR }}/Test*
            ${{ env.BINARY_DIR }}/test_*
          retention-days: 1

      - name: Compile OpenSoar - Sanitizer Check
        if: ${{ matrix.target == 'UNIX' && !startsWith(github.ref, 'refs/tags/v') && github.ref == 'refs/heads/master'  }}
        run: |
          echo "Unix - Sanitizer Check"
          make -j$(nproc) TARGET=${{ matrix.target }} DEBUG=${{ env.DEBUG }} USE_CCACHE=y V=2 everything VFB=y SANITIZE=y DEBUG_GLIBCXX=y
  
      - name: Compile OpenSoar - Release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "Compile OpenSoar - Release"
          # please use secrets.XCSOAR_UPLOAD_KEY... for secrets.OPENSOAR_UPLOAD_KEY to be
          # compatible with repo XCSoar/XCSoar
            case ${{ matrix.target }} in
              ANDROID | ANDROIDFAT | ANDROIDAARCH64))
                if [ -n "${{ secrets.XCSOAR_UPLOAD_KEY_JKS_PASSWORD }}" ] && [ -n "${{ secrets.XCSOAR_UPLOAD_KEY_JKS_KEY_ALIAS }}" ]; then
                  ANDROID_KEYSTORE_PASS=${{ secrets.XCSOAR_UPLOAD_KEY_JKS_PASSWORD }} \
                  make -j$(nproc) TARGET=${{ matrix.target }} DEBUG=${{ env.DEBUG }} USE_CCACHE=y V=2 \
                  output/ANDROID/bin/${{ matrix.target_bin }}${{ matrix.target_ext }} \
                  ANDROID_KEYSTORE=~/.android/signing-key.jks ANDROID_KEY_ALIAS=${{ secrets.XCSOAR_UPLOAD_KEY_JKS_KEY_ALIAS }}
                else
                  make -j$(nproc) TARGET=${{ matrix.target }} DEBUG=${{ env.DEBUG }} USE_CCACHE=y V=2 \
                  output/ANDROID/bin/${{ matrix.target_bin }}${{ matrix.target_ext }}
                fi
                ;;
              WIN64 | WIN32 | PC)
                make -j$(nproc) TARGET=${{ matrix.target }} DEBUG=${{ env.DEBUG }} USE_CCACHE=y V=2 everything
                ;;
              KOBO)
                make -j$(nproc) TARGET=${{ matrix.target }} DEBUG=${{ env.DEBUG }} USE_CCACHE=y V=2 output/${{ matrix.target }}/${{ matrix.target_bin }}${{ matrix.target_ext }}
                ;;
              UNIX)
                mkdir -p output/UNIX/DPKG
                rsync -apt . output/UNIX/DPKG --exclude=output/UNIX/DPKG
                cd output/UNIX/DPKG
                DEB_BUILD_OPTIONS=ccache dpkg-buildpackage --jobs-force=$(nproc) --no-sign
                cp *.deb ../
                ;;
              OSX64 | IOS64 | MACOS)
                gmake -j$(nproc) TARGET=${{ matrix.target }} DEBUG=${{ env.DEBUG }} USE_CCACHE=y V=2 OPTIMIZE="-O0"
                ;;
            esac
  
      - name: Upload Release artifact
        uses: actions/upload-artifact@v4
        # if: ${{ (matrix.target_upload || startsWith(github.ref, 'refs/tags/v')) }} 
        if: ${{ matrix.target_upload }} 
        with:
          name: ${{ matrix.target_final }}-${{ env.GIT_COMMIT }}-${{ matrix.target }}${{ matrix.target_ext }}
          path: |
            ${{ matrix.target_bin }}${{ matrix.target_ext }}
            # ${{ env.BINARY_DIR }}/${{ matrix.target_bin }}${{ matrix.target_ext }}
            echo "Binary Directory: ${{ env.BINARY_DIR }}"
          retention-days: 2
  
      - name: Test Directory (DEBIAN-UNIX)
        if: ${{ startsWith(matrix.target, 'UNIX') }}
        run: |
          if [ -d output/UNIX/DPKG ]; then 
            cd output/UNIX/DPKG
            TARGET_PATH=output/DEBIAN-${{ matrix.target }}
          else
            TARGET_PATH=output/${{ matrix.target }}
          fi
          echo "----------------------------------------------------------------"
          if [ -d $TARGET_PATH/bin ]; then
            echo "ls -l $TARGET_PATH/bin"
            echo "=============================================================="
            ls -l $TARGET_PATH/bin
          else
            echo "dir '$TARGET_PATH/bin' doesn't exist"
          fi
          echo "----------------------------------------------------------------"
  
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        if: ${{ startsWith(github.ref, 'refs/tags/v') && matrix.target_upload == true && needs.release.outputs.upload_url != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          # asset_path: ${{ env.BINARY_DIR }}/${{ matrix.target_bin }}${{ matrix.target_ext }}
          asset_path: ${{ matrix.target_bin }}${{ matrix.target_ext }}
          asset_name: ${{ matrix.target_final }}-${{ matrix.target }}${{ matrix.target_ext }}
          asset_content_type: application/zip
  
      - name: Deploy to Download server - testing
        if: ${{ github.repository == 'August2111/OpenSoar' && github.ref == 'refs/heads/master' }}
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.REPOSITORY_SSH_KEY }}
          ARGS: "-rltgoDzvO"
          # SOURCE: ${{ env.BINARY_DIR }}/${{ matrix.target_bin }}${{ matrix.target_ext }}
          SOURCE: ${{ matrix.target_bin }}${{ matrix.target_ext }}
          REMOTE_HOST: ${{ secrets.REPOSITORY_HOST }}
          REMOTE_USER: ${{ secrets.REPOSITORY_SSH_USER }}
          TARGET: ${{ secrets.REPOSITORY_REMOTE_PATH }}/testing/${{ matrix.target }}/
          SCRIPT_BEFORE: mkdir -p ${{ secrets.REPOSITORY_REMOTE_PATH }}/testing/${{ matrix.target }}
  
      - name: Deploy to Download server - release
        if: ${{ github.repository == 'OpenSoaring/OpenSoar' && startsWith(github.ref, 'refs/tags/v') && matrix.target_upload == true }}
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.REPOSITORY_SSH_KEY }}
          ARGS: "-rltgoDzvO"
          # SOURCE: ${{ env.BINARY_DIR }}/${{ matrix.target_bin }}${{ matrix.target_ext }}
          SOURCE: ${{ matrix.target_bin }}${{ matrix.target_ext }}
          REMOTE_HOST: ${{ secrets.REPOSITORY_HOST }}
          REMOTE_USER: ${{ secrets.REPOSITORY_SSH_USER }}
          TARGET: ${{ secrets.REPOSITORY_REMOTE_PATH }}/releases/${{ needs.release.outputs.version }}/${{ matrix.target }}/
          SCRIPT_BEFORE: mkdir -p ${{ secrets.REPOSITORY_REMOTE_PATH }}/releases/${{ needs.release.outputs.version }}/${{ matrix.target }}/
